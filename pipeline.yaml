apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: deepfacelab-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline_compilation_time: '2021-06-23T08:47:03.886993',
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"default": "https://www.youtube.com/watch?v=hZNL2j_YJyM",
      "name": "source_youtube_url", "optional": true, "type": "String"}, {"default":
      "00:00:30.00", "name": "source_start_time", "optional": true, "type": "String"},
      {"default": "00:05:00.00", "name": "source_duration", "optional": true, "type":
      "String"}, {"default": "https://www.youtube.com/watch?v=-Op3ct7NmlA", "name":
      "target_youtube_url", "optional": true, "type": "String"}, {"default": "00:00:10.00",
      "name": "target_start_time", "optional": true, "type": "String"}, {"default":
      "00:00:20.00", "name": "target_duration", "optional": true, "type": "String"},
      {"default": "10m", "name": "train_timeout", "optional": true, "type": "String"},
      {"default": "deepfacelab-workspace-pvc", "name": "workspace_pvc_name", "optional":
      true, "type": "String"}], "name": "DeepFaceLab Pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2}
spec:
  entrypoint: deepfacelab-pipeline
  templates:
  - name: clear-workspace-op
    container:
      args: []
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "import subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef clear_workspace_op():\n    run_commands(f\"\
        \"\"\n    cd /app/DeepFaceLab_Linux/scripts/;\n    rm -rf /workspace/*\n \
        \   bash 1_clear_workspace.sh\n    find /workspace\n    \"\"\")\n\nimport\
        \ argparse\n_parser = argparse.ArgumentParser(prog='Clear workspace op', description='')\n\
        _parsed_args = vars(_parser.parse_args())\n\n_outputs = clear_workspace_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: volume-creation-name}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": [], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import
          subprocess\ndef run_commands(commands, collect=False):\n    output = []\n    with
          subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE, executable=\"/bin/bash\")
          as process:\n        if process.stdout is not None:\n            for line
          in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          clear_workspace_op():\n    run_commands(f\"\"\"\n    cd /app/DeepFaceLab_Linux/scripts/;\n    rm
          -rf /workspace/*\n    bash 1_clear_workspace.sh\n    find /workspace\n    \"\"\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Clear workspace op'',
          description='''')\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = clear_workspace_op(**_parsed_args)\n"], "image": "ghcr.io/azurelysium/deepfacelab:latest"}},
          "name": "Clear workspace op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: deepfacelab-pipeline
    inputs:
      parameters:
      - {name: source_duration}
      - {name: source_start_time}
      - {name: source_youtube_url}
      - {name: target_duration}
      - {name: target_start_time}
      - {name: target_youtube_url}
      - {name: train_timeout}
      - {name: workspace_pvc_name}
    dag:
      tasks:
      - name: clear-workspace-op
        template: clear-workspace-op
        dependencies: [volume-creation]
        arguments:
          parameters:
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: download-videos-op
        template: download-videos-op
        dependencies: [clear-workspace-op, volume-creation]
        arguments:
          parameters:
          - {name: source_duration, value: '{{inputs.parameters.source_duration}}'}
          - {name: source_start_time, value: '{{inputs.parameters.source_start_time}}'}
          - {name: source_youtube_url, value: '{{inputs.parameters.source_youtube_url}}'}
          - {name: target_duration, value: '{{inputs.parameters.target_duration}}'}
          - {name: target_start_time, value: '{{inputs.parameters.target_start_time}}'}
          - {name: target_youtube_url, value: '{{inputs.parameters.target_youtube_url}}'}
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: extract-faces-from-source-op
        template: extract-faces-from-source-op
        dependencies: [extract-images-from-source-op, volume-creation]
        arguments:
          parameters:
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: extract-faces-from-target-op
        template: extract-faces-from-target-op
        dependencies: [extract-images-from-target-op, volume-creation]
        arguments:
          parameters:
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: extract-images-from-source-op
        template: extract-images-from-source-op
        dependencies: [download-videos-op, volume-creation]
        arguments:
          parameters:
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: extract-images-from-target-op
        template: extract-images-from-target-op
        dependencies: [download-videos-op, volume-creation]
        arguments:
          parameters:
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: make-video-output-op
        template: make-video-output-op
        dependencies: [merge-quick96-op, volume-creation]
        arguments:
          parameters:
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: merge-quick96-op
        template: merge-quick96-op
        dependencies: [extract-faces-from-target-op, train-quick96-op, volume-creation]
        arguments:
          parameters:
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: train-quick96-op
        template: train-quick96-op
        dependencies: [extract-faces-from-source-op, volume-creation]
        arguments:
          parameters:
          - {name: train_timeout, value: '{{inputs.parameters.train_timeout}}'}
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: volume-creation
        template: volume-creation
        arguments:
          parameters:
          - {name: workspace_pvc_name, value: '{{inputs.parameters.workspace_pvc_name}}'}
  - name: download-videos-op
    container:
      args: [--source-youtube-url, '{{inputs.parameters.source_youtube_url}}', --source-start-time,
        '{{inputs.parameters.source_start_time}}', --source-duration, '{{inputs.parameters.source_duration}}',
        --target-youtube-url, '{{inputs.parameters.target_youtube_url}}', --target-start-time,
        '{{inputs.parameters.target_start_time}}', --target-duration, '{{inputs.parameters.target_duration}}']
      command:
      - sh
      - -c
      - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        'youtube-dl' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
        --no-warn-script-location 'youtube-dl' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "import subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef download_videos_op(\n      \
        \  source_youtube_url,\n        source_start_time,\n        source_duration,\n\
        \        target_youtube_url,\n        target_start_time,\n        target_duration,\n\
        ):\n    run_commands(f\"\"\"\n    rm -f download.mp4\n    youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4'\
        \ '{source_youtube_url}' -o download.mp4\n    ffmpeg -ss {source_start_time}\
        \ -i download.mp4 -t {source_duration} -c copy /workspace/data_src.mp4\n\n\
        \    rm -f download.mp4\n    youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4'\
        \ '{target_youtube_url}' -o download.mp4\n    ffmpeg -ss {target_start_time}\
        \ -i download.mp4 -t {target_duration} -c copy /workspace/data_dst.mp4\n \
        \   \"\"\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Download\
        \ videos op', description='')\n_parser.add_argument(\"--source-youtube-url\"\
        , dest=\"source_youtube_url\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--source-start-time\", dest=\"source_start_time\",\
        \ type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
        --source-duration\", dest=\"source_duration\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--target-youtube-url\", dest=\"target_youtube_url\"\
        , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
        --target-start-time\", dest=\"target_start_time\", type=str, required=True,\
        \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--target-duration\",\
        \ dest=\"target_duration\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parsed_args = vars(_parser.parse_args())\n\n_outputs = download_videos_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: source_duration}
      - {name: source_start_time}
      - {name: source_youtube_url}
      - {name: target_duration}
      - {name: target_start_time}
      - {name: target_youtube_url}
      - {name: volume-creation-name}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--source-youtube-url", {"inputValue": "source_youtube_url"},
          "--source-start-time", {"inputValue": "source_start_time"}, "--source-duration",
          {"inputValue": "source_duration"}, "--target-youtube-url", {"inputValue":
          "target_youtube_url"}, "--target-start-time", {"inputValue": "target_start_time"},
          "--target-duration", {"inputValue": "target_duration"}], "command": ["sh",
          "-c", "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
          ''youtube-dl'' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
          --quiet --no-warn-script-location ''youtube-dl'' --user) && \"$0\" \"$@\"",
          "sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "import subprocess\ndef run_commands(commands,
          collect=False):\n    output = []\n    with subprocess.Popen(commands, shell=True,
          stdout=subprocess.PIPE, executable=\"/bin/bash\") as process:\n        if
          process.stdout is not None:\n            for line in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          download_videos_op(\n        source_youtube_url,\n        source_start_time,\n        source_duration,\n        target_youtube_url,\n        target_start_time,\n        target_duration,\n):\n    run_commands(f\"\"\"\n    rm
          -f download.mp4\n    youtube-dl -f ''bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4''
          ''{source_youtube_url}'' -o download.mp4\n    ffmpeg -ss {source_start_time}
          -i download.mp4 -t {source_duration} -c copy /workspace/data_src.mp4\n\n    rm
          -f download.mp4\n    youtube-dl -f ''bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4''
          ''{target_youtube_url}'' -o download.mp4\n    ffmpeg -ss {target_start_time}
          -i download.mp4 -t {target_duration} -c copy /workspace/data_dst.mp4\n    \"\"\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Download videos op'',
          description='''')\n_parser.add_argument(\"--source-youtube-url\", dest=\"source_youtube_url\",
          type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--source-start-time\",
          dest=\"source_start_time\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--source-duration\",
          dest=\"source_duration\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--target-youtube-url\",
          dest=\"target_youtube_url\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--target-start-time\",
          dest=\"target_start_time\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--target-duration\",
          dest=\"target_duration\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = download_videos_op(**_parsed_args)\n"],
          "image": "ghcr.io/azurelysium/deepfacelab:latest"}}, "inputs": [{"name":
          "source_youtube_url", "type": "String"}, {"name": "source_start_time", "type":
          "String"}, {"name": "source_duration", "type": "String"}, {"name": "target_youtube_url",
          "type": "String"}, {"name": "target_start_time", "type": "String"}, {"name":
          "target_duration", "type": "String"}], "name": "Download videos op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"source_duration": "{{inputs.parameters.source_duration}}",
          "source_start_time": "{{inputs.parameters.source_start_time}}", "source_youtube_url":
          "{{inputs.parameters.source_youtube_url}}", "target_duration": "{{inputs.parameters.target_duration}}",
          "target_start_time": "{{inputs.parameters.target_start_time}}", "target_youtube_url":
          "{{inputs.parameters.target_youtube_url}}"}', pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: extract-faces-from-source-op
    container:
      args: []
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "import subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef extract_faces_from_source_op(\n\
        \        image_size = 512,\n        jpeg_quality = 100,\n):\n    run_commands(f\"\
        \"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n    conda activate deepfacelab;\n\
        \    cd /app/DeepFaceLab_Linux/scripts/;\n    bash 4_data_src_extract_faces_S3FD.sh\
        \ \\\n         --output-debug \\\n         --face-type whole_face \\\n   \
        \      --max-faces-from-image 1 \\\n         --image-size {image_size} \\\n\
        \         --jpeg-quality {jpeg_quality} \\\n    \"\"\")\n\nimport argparse\n\
        _parser = argparse.ArgumentParser(prog='Extract faces from source op', description='')\n\
        _parser.add_argument(\"--image-size\", dest=\"image_size\", type=int, required=False,\
        \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--jpeg-quality\", dest=\"\
        jpeg_quality\", type=int, required=False, default=argparse.SUPPRESS)\n_parsed_args\
        \ = vars(_parser.parse_args())\n\n_outputs = extract_faces_from_source_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      resources:
        limits: {nvidia.com/gpu: 1}
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: volume-creation-name}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": [{"if": {"cond": {"isPresent": "image_size"}, "then": ["--image-size",
          {"inputValue": "image_size"}]}}, {"if": {"cond": {"isPresent": "jpeg_quality"},
          "then": ["--jpeg-quality", {"inputValue": "jpeg_quality"}]}}], "command":
          ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "import subprocess\ndef run_commands(commands,
          collect=False):\n    output = []\n    with subprocess.Popen(commands, shell=True,
          stdout=subprocess.PIPE, executable=\"/bin/bash\") as process:\n        if
          process.stdout is not None:\n            for line in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          extract_faces_from_source_op(\n        image_size = 512,\n        jpeg_quality
          = 100,\n):\n    run_commands(f\"\"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n    conda
          activate deepfacelab;\n    cd /app/DeepFaceLab_Linux/scripts/;\n    bash
          4_data_src_extract_faces_S3FD.sh \\\n         --output-debug \\\n         --face-type
          whole_face \\\n         --max-faces-from-image 1 \\\n         --image-size
          {image_size} \\\n         --jpeg-quality {jpeg_quality} \\\n    \"\"\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Extract faces from source
          op'', description='''')\n_parser.add_argument(\"--image-size\", dest=\"image_size\",
          type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--jpeg-quality\",
          dest=\"jpeg_quality\", type=int, required=False, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = extract_faces_from_source_op(**_parsed_args)\n"],
          "image": "ghcr.io/azurelysium/deepfacelab:latest"}}, "inputs": [{"default":
          "512", "name": "image_size", "optional": true, "type": "Integer"}, {"default":
          "100", "name": "jpeg_quality", "optional": true, "type": "Integer"}], "name":
          "Extract faces from source op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: extract-faces-from-target-op
    container:
      args: []
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "import subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef extract_faces_from_target_op(\n\
        \        image_size = 512,\n        jpeg_quality = 100,\n):\n    run_commands(f\"\
        \"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n    conda activate deepfacelab;\n\
        \    cd /app/DeepFaceLab_Linux/scripts/;\n    bash 5_data_dst_extract_faces_S3FD.sh\
        \ \\\n         --output-debug \\\n         --face-type whole_face \\\n   \
        \      --max-faces-from-image 0 \\\n         --image-size {image_size} \\\n\
        \         --jpeg-quality {jpeg_quality} \\\n    \"\"\")\n\nimport argparse\n\
        _parser = argparse.ArgumentParser(prog='Extract faces from target op', description='')\n\
        _parser.add_argument(\"--image-size\", dest=\"image_size\", type=int, required=False,\
        \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--jpeg-quality\", dest=\"\
        jpeg_quality\", type=int, required=False, default=argparse.SUPPRESS)\n_parsed_args\
        \ = vars(_parser.parse_args())\n\n_outputs = extract_faces_from_target_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      resources:
        limits: {nvidia.com/gpu: 1}
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: volume-creation-name}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": [{"if": {"cond": {"isPresent": "image_size"}, "then": ["--image-size",
          {"inputValue": "image_size"}]}}, {"if": {"cond": {"isPresent": "jpeg_quality"},
          "then": ["--jpeg-quality", {"inputValue": "jpeg_quality"}]}}], "command":
          ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "import subprocess\ndef run_commands(commands,
          collect=False):\n    output = []\n    with subprocess.Popen(commands, shell=True,
          stdout=subprocess.PIPE, executable=\"/bin/bash\") as process:\n        if
          process.stdout is not None:\n            for line in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          extract_faces_from_target_op(\n        image_size = 512,\n        jpeg_quality
          = 100,\n):\n    run_commands(f\"\"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n    conda
          activate deepfacelab;\n    cd /app/DeepFaceLab_Linux/scripts/;\n    bash
          5_data_dst_extract_faces_S3FD.sh \\\n         --output-debug \\\n         --face-type
          whole_face \\\n         --max-faces-from-image 0 \\\n         --image-size
          {image_size} \\\n         --jpeg-quality {jpeg_quality} \\\n    \"\"\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Extract faces from target
          op'', description='''')\n_parser.add_argument(\"--image-size\", dest=\"image_size\",
          type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--jpeg-quality\",
          dest=\"jpeg_quality\", type=int, required=False, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = extract_faces_from_target_op(**_parsed_args)\n"],
          "image": "ghcr.io/azurelysium/deepfacelab:latest"}}, "inputs": [{"default":
          "512", "name": "image_size", "optional": true, "type": "Integer"}, {"default":
          "100", "name": "jpeg_quality", "optional": true, "type": "Integer"}], "name":
          "Extract faces from target op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: extract-images-from-source-op
    container:
      args: []
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "import subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef extract_images_from_source_op(\n\
        \        fps = 1,\n):\n    run_commands(f\"\"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n\
        \    conda activate deepfacelab;\n    cd /app/DeepFaceLab_Linux/scripts/;\n\
        \    bash 2_extract_image_from_data_src.sh --fps {fps} --output-ext png\n\
        \    \"\"\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Extract\
        \ images from source op', description='')\n_parser.add_argument(\"--fps\"\
        , dest=\"fps\", type=int, required=False, default=argparse.SUPPRESS)\n_parsed_args\
        \ = vars(_parser.parse_args())\n\n_outputs = extract_images_from_source_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: volume-creation-name}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": [{"if": {"cond": {"isPresent": "fps"}, "then": ["--fps", {"inputValue":
          "fps"}]}}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import
          subprocess\ndef run_commands(commands, collect=False):\n    output = []\n    with
          subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE, executable=\"/bin/bash\")
          as process:\n        if process.stdout is not None:\n            for line
          in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          extract_images_from_source_op(\n        fps = 1,\n):\n    run_commands(f\"\"\"\n    source
          /opt/conda/etc/profile.d/conda.sh;\n    conda activate deepfacelab;\n    cd
          /app/DeepFaceLab_Linux/scripts/;\n    bash 2_extract_image_from_data_src.sh
          --fps {fps} --output-ext png\n    \"\"\")\n\nimport argparse\n_parser =
          argparse.ArgumentParser(prog=''Extract images from source op'', description='''')\n_parser.add_argument(\"--fps\",
          dest=\"fps\", type=int, required=False, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = extract_images_from_source_op(**_parsed_args)\n"],
          "image": "ghcr.io/azurelysium/deepfacelab:latest"}}, "inputs": [{"default":
          "1", "name": "fps", "optional": true, "type": "Integer"}], "name": "Extract
          images from source op"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: extract-images-from-target-op
    container:
      args: []
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "import subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef extract_images_from_target_op():\n\
        \    run_commands(f\"\"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n\
        \    conda activate deepfacelab;\n    cd /app/DeepFaceLab_Linux/scripts/;\n\
        \    bash 3_extract_image_from_data_dst.sh --output-ext png\n    \"\"\")\n\
        \nimport argparse\n_parser = argparse.ArgumentParser(prog='Extract images\
        \ from target op', description='')\n_parsed_args = vars(_parser.parse_args())\n\
        \n_outputs = extract_images_from_target_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: volume-creation-name}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": [], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import
          subprocess\ndef run_commands(commands, collect=False):\n    output = []\n    with
          subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE, executable=\"/bin/bash\")
          as process:\n        if process.stdout is not None:\n            for line
          in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          extract_images_from_target_op():\n    run_commands(f\"\"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n    conda
          activate deepfacelab;\n    cd /app/DeepFaceLab_Linux/scripts/;\n    bash
          3_extract_image_from_data_dst.sh --output-ext png\n    \"\"\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Extract images from target
          op'', description='''')\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = extract_images_from_target_op(**_parsed_args)\n"], "image": "ghcr.io/azurelysium/deepfacelab:latest"}},
          "name": "Extract images from target op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: make-video-output-op
    container:
      args: [--video, /tmp/outputs/video/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n \
        \   os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
        \nimport subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef make_video_output_op(\n    video_path,\n\
        ):\n    run_commands(f\"\"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n\
        \    conda activate deepfacelab;\n    cd /app/DeepFaceLab_Linux/scripts/;\n\
        \    bash 8_merged_to_mp4_lossless.sh\n    cp /workspace/result.mp4 {video_path}\n\
        \    \"\"\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Make\
        \ video output op', description='')\n_parser.add_argument(\"--video\", dest=\"\
        video_path\", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)\n\
        _parsed_args = vars(_parser.parse_args())\n\n_outputs = make_video_output_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: volume-creation-name}
    outputs:
      artifacts:
      - {name: make-video-output-op-video, path: /tmp/outputs/video/data}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--video", {"outputPath": "video"}], "command": ["sh", "-ec",
          "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
          -u \"$program_path\" \"$@\"\n", "def _make_parent_dirs_and_return_path(file_path:
          str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
          file_path\n\nimport subprocess\ndef run_commands(commands, collect=False):\n    output
          = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,
          executable=\"/bin/bash\") as process:\n        if process.stdout is not
          None:\n            for line in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          make_video_output_op(\n    video_path,\n):\n    run_commands(f\"\"\"\n    source
          /opt/conda/etc/profile.d/conda.sh;\n    conda activate deepfacelab;\n    cd
          /app/DeepFaceLab_Linux/scripts/;\n    bash 8_merged_to_mp4_lossless.sh\n    cp
          /workspace/result.mp4 {video_path}\n    \"\"\")\n\nimport argparse\n_parser
          = argparse.ArgumentParser(prog=''Make video output op'', description='''')\n_parser.add_argument(\"--video\",
          dest=\"video_path\", type=_make_parent_dirs_and_return_path, required=True,
          default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = make_video_output_op(**_parsed_args)\n"], "image": "ghcr.io/azurelysium/deepfacelab:latest"}},
          "name": "Make video output op", "outputs": [{"name": "video", "type": "mp4"}]}',
        pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: merge-quick96-op
    container:
      args: []
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "import subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef merge_quick96_op(\n):\n    run_commands(f\"\
        \"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n    conda activate deepfacelab;\n\
        \    cd /app/DeepFaceLab_Linux/scripts/;\n    echo \"0\\n\" | bash 7_merge_Quick96.sh\
        \ --force-model-name Quick96\n    \"\"\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Merge\
        \ quick96 op', description='')\n_parsed_args = vars(_parser.parse_args())\n\
        \n_outputs = merge_quick96_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      resources:
        limits: {nvidia.com/gpu: 1}
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: volume-creation-name}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": [], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "import
          subprocess\ndef run_commands(commands, collect=False):\n    output = []\n    with
          subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE, executable=\"/bin/bash\")
          as process:\n        if process.stdout is not None:\n            for line
          in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          merge_quick96_op(\n):\n    run_commands(f\"\"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n    conda
          activate deepfacelab;\n    cd /app/DeepFaceLab_Linux/scripts/;\n    echo
          \"0\\n\" | bash 7_merge_Quick96.sh --force-model-name Quick96\n    \"\"\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Merge quick96 op'', description='''')\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = merge_quick96_op(**_parsed_args)\n"],
          "image": "ghcr.io/azurelysium/deepfacelab:latest"}}, "name": "Merge quick96
          op"}', pipelines.kubeflow.org/component_ref: '{}', pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: train-quick96-op
    container:
      args: [--timeout, '{{inputs.parameters.train_timeout}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "import subprocess\ndef run_commands(commands, collect=False):\n    output\
        \ = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,\
        \ executable=\"/bin/bash\") as process:\n        if process.stdout is not\
        \ None:\n            for line in process.stdout:\n                print(line.strip())\n\
        \                if collect:\n                    ouptut.append(line.strip())\n\
        \    return \"\\n\".join(output)\n    \n\ndef train_quick96_op(\n        timeout\
        \ = \"5m\",\n):\n    run_commands(f\"\"\"\n    source /opt/conda/etc/profile.d/conda.sh;\n\
        \    conda activate deepfacelab;\n    cd /app/DeepFaceLab_Linux/scripts/;\n\
        \    timeout -s SIGINT {timeout} \\\n            bash 6_train_Quick96_no_preview.sh\
        \ \\\n            --silent-start \\\n            --force-model-name Quick96\n\
        \    \"\"\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Train\
        \ quick96 op', description='')\n_parser.add_argument(\"--timeout\", dest=\"\
        timeout\", type=str, required=False, default=argparse.SUPPRESS)\n_parsed_args\
        \ = vars(_parser.parse_args())\n\n_outputs = train_quick96_op(**_parsed_args)\n"
      image: ghcr.io/azurelysium/deepfacelab:latest
      resources:
        limits: {nvidia.com/gpu: 1}
      volumeMounts:
      - {mountPath: /workspace, name: volume-creation}
      imagePullPolicy: Always
    inputs:
      parameters:
      - {name: train_timeout}
      - {name: volume-creation-name}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": [{"if": {"cond": {"isPresent": "timeout"}, "then": ["--timeout",
          {"inputValue": "timeout"}]}}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "import subprocess\ndef run_commands(commands, collect=False):\n    output
          = []\n    with subprocess.Popen(commands, shell=True, stdout=subprocess.PIPE,
          executable=\"/bin/bash\") as process:\n        if process.stdout is not
          None:\n            for line in process.stdout:\n                print(line.strip())\n                if
          collect:\n                    ouptut.append(line.strip())\n    return \"\\n\".join(output)\n    \n\ndef
          train_quick96_op(\n        timeout = \"5m\",\n):\n    run_commands(f\"\"\"\n    source
          /opt/conda/etc/profile.d/conda.sh;\n    conda activate deepfacelab;\n    cd
          /app/DeepFaceLab_Linux/scripts/;\n    timeout -s SIGINT {timeout} \\\n            bash
          6_train_Quick96_no_preview.sh \\\n            --silent-start \\\n            --force-model-name
          Quick96\n    \"\"\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Train
          quick96 op'', description='''')\n_parser.add_argument(\"--timeout\", dest=\"timeout\",
          type=str, required=False, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = train_quick96_op(**_parsed_args)\n"], "image": "ghcr.io/azurelysium/deepfacelab:latest"}},
          "inputs": [{"default": "5m", "name": "timeout", "optional": true, "type":
          "String"}], "name": "Train quick96 op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"timeout": "{{inputs.parameters.train_timeout}}"}',
        pipelines.kubeflow.org/max_cache_staleness: P0D}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: volume-creation
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '{{workflow.name}}-{{inputs.parameters.workspace_pvc_name}}'
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 16Gi
    inputs:
      parameters:
      - {name: workspace_pvc_name}
    outputs:
      parameters:
      - name: volume-creation-manifest
        valueFrom: {jsonPath: '{}'}
      - name: volume-creation-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: volume-creation-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.6.2, pipelines.kubeflow.org/pipeline-sdk-type: kfp}
  arguments:
    parameters:
    - {name: source_youtube_url, value: 'https://www.youtube.com/watch?v=hZNL2j_YJyM'}
    - {name: source_start_time, value: '00:00:30.00'}
    - {name: source_duration, value: '00:05:00.00'}
    - {name: target_youtube_url, value: 'https://www.youtube.com/watch?v=-Op3ct7NmlA'}
    - {name: target_start_time, value: '00:00:10.00'}
    - {name: target_duration, value: '00:00:20.00'}
    - {name: train_timeout, value: 10m}
    - {name: workspace_pvc_name, value: deepfacelab-workspace-pvc}
  serviceAccountName: pipeline-runner
